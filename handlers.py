from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiosend import CryptoPay
import asyncio
from aiosend.types import Invoice
from config import CRYPTO_PAY_TOKEN
from database import get_products, add_to_cart, get_cart, clear_cart
from keyboards import main_menu_keyboard, catalog_keyboard, cart_keyboard, payment_keyboard

cp = CryptoPay(CRYPTO_PAY_TOKEN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: Message) -> None:
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
async def show_catalog(callback: CallbackQuery) -> None:
    products = get_products()
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=catalog_keyboard(products))
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_to_cart_handler(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[1])
    add_to_cart(user_id, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
async def show_cart(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    cart_items = get_cart(user_id)
    if not cart_items:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu_keyboard())
        return

    total = sum(item[2] * item[3] for item in cart_items)
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    cart_text += "\n".join(f"{item[1]} x{item[3]} = ${item[2] * item[3]:.2f}" for item in cart_items)
    cart_text += f"\n\nüíµ –ò—Ç–æ–≥–æ: ${total:.2f}"

    await callback.message.edit_text(cart_text, reply_markup=cart_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã
async def checkout(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    cart_items = get_cart(user_id)
    if not cart_items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    total = sum(item[2] * item[3] for item in cart_items)
    try:
        invoice = await cp.create_invoice(total, "USDT")
        await callback.message.edit_text(
            f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É ${total:.2f}\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=payment_keyboard(invoice.mini_app_invoice_url)
        )
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
        await check_payment_status(invoice.invoice_id, callback.message)
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
async def clear_cart_handler(callback: CallbackQuery) -> None:
    user_id = callback.from_user.id
    clear_cart(user_id)
    await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=main_menu_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_menu(callback: CallbackQuery) -> None:
    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!", reply_markup=main_menu_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
async def cancel_payment(callback: CallbackQuery) -> None:
    await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
async def check_payment_status(invoice_id: str, message: Message) -> None:
    while True:
        await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        invoice = await cp.get_invoice(invoice_id)
        if invoice.status == "paid":
            await message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: {invoice.amount} {invoice.asset}")
            # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            clear_cart(message.from_user.id)
            break
        elif invoice.status in ["expired", "cancelled"]:
            await message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu_keyboard())
            break