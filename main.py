import asyncio
from dataclasses import dataclass
from typing import Dict, List

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from aiosend import CryptoPay
from aiosend.types import Invoice

BOT_TOKEN = "YOUR_BOT_TOKEN"
CRYPTO_PAY_TOKEN = "YOUR_CRYPTO_PAY_TOKEN"

bot = Bot(BOT_TOKEN)
cp = CryptoPay(CRYPTO_PAY_TOKEN)
router = Router()
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

@dataclass
class Product:
    id: int
    name: str
    description: str
    price: float
    image_url: str

products: List[Product] = [
    Product(1, "–§—É—Ç–±–æ–ª–∫–∞", "–°—Ç–∏–ª—å–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º", 10.99, "https://example.com/tshirt.jpg"),
    Product(2, "–ö–µ–ø–∫–∞", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∫–µ–ø–∫–∞", 7.99, "https://example.com/cap.jpg"),
]

user_carts: Dict[int, Dict[int, int]] = {}

class OrderStates(StatesGroup):
    choosing_products = State()
    checkout = State()
    waiting_payment = State()
    order_complete = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
    ])
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!", reply_markup=keyboard)

@router.callback_query(F.data == "catalog")
async def show_catalog(callback: CallbackQuery):
    keyboard = [[InlineKeyboardButton(text=f"{p.name} - ${p.price}", callback_data=f"product_{p.id}")] for p in products]
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

@router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = next((p for p in products if p.id == product_id), None)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product.id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
    ])
    await callback.message.answer(f"<b>{product.name}</b>\n\n{product.description}\n\nüíµ –¶–µ–Ω–∞: ${product.price}", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[3])
    if user_id not in user_carts:
        user_carts[user_id] = {}
    if product_id in user_carts[user_id]:
        user_carts[user_id][product_id] += 1
    else:
        user_carts[user_id][product_id] = 1
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart")],
        [InlineKeyboardButton(text="üîô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")]
    ])
    await callback.message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", reply_markup=keyboard)

@router.callback_query(F.data == "cart")
async def show_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
        ]))
        await callback.answer()
        return
    total = 0
    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    for product_id, quantity in user_carts[user_id].items():
        product = next((p for p in products if p.id == product_id), None)
        if product:
            item_total = product.price * quantity
            total += item_total
            cart_text += f"{product.name} x{quantity} = ${item_total:.2f}\n"
    cart_text += f"\nüíµ <b>–ò—Ç–æ–≥–æ: ${total:.2f}</b>"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="checkout")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton(text="üîô –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="catalog")]
    ])
    await callback.message.answer(cart_text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id in user_carts:
        user_carts[user_id] = {}
    await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
    ]))
    await callback.answer()

@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    await state.set_state(OrderStates.waiting_payment)
    total = 0
    for product_id, quantity in user_carts[user_id].items():
        product = next((p for p in products if p.id == product_id), None)
        if product:
            total += product.price * quantity
    try:
        invoice = await cp.create_invoice(total, "USDT")
        await state.update_data(invoice_id=invoice.invoice_id, total=total)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice.mini_app_invoice_url)],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
        ])
        await callback.message.answer(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É ${total:.2f}\n\n–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)
        invoice.poll(message=callback.message)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        await state.set_state(OrderStates.choosing_products)
    await callback.answer()

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.choosing_products)
    await callback.message.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="cart")]
    ]))
    await callback.answer()

@cp.invoice_polling()
async def handle_payment(invoice: Invoice, message: Message):
    user_id = message.chat.id
    if user_id in user_carts:
        user_carts[user_id] = {}
    await message.answer("‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!</b>\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="catalog")]
    ]))

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await asyncio.gather(
        dp.start_polling(bot),
        cp.start_polling(),
    )

if __name__ == "__main__":
    asyncio.run(main())
